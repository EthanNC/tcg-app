/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RandomHeroImport } from './routes/random-hero'
import { Route as RandomImport } from './routes/random'
import { Route as AboutImport } from './routes/about'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as ProfileIndexImport } from './routes/profile/index'
import { Route as SetsSetIdImport } from './routes/sets/$setId'
import { Route as CardsCardIdImport } from './routes/cards/$cardId'
import { Route as AuthVerifyEmailImport } from './routes/auth/verify-email'
import { Route as AuthSignupImport } from './routes/auth/signup'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password'
import { Route as AuthResetPasswordCodeImport } from './routes/auth/reset-password/$code'

// Create/Update Routes

const RandomHeroRoute = RandomHeroImport.update({
  path: '/random-hero',
  getParentRoute: () => rootRoute,
} as any)

const RandomRoute = RandomImport.update({
  path: '/random',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileIndexRoute = ProfileIndexImport.update({
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any)

const SetsSetIdRoute = SetsSetIdImport.update({
  path: '/sets/$setId',
  getParentRoute: () => rootRoute,
} as any)

const CardsCardIdRoute = CardsCardIdImport.update({
  path: '/cards/$cardId',
  getParentRoute: () => rootRoute,
} as any)

const AuthVerifyEmailRoute = AuthVerifyEmailImport.update({
  path: '/auth/verify-email',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignupRoute = AuthSignupImport.update({
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  path: '/auth/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const AuthResetPasswordCodeRoute = AuthResetPasswordCodeImport.update({
  path: '/auth/reset-password/$code',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/random': {
      id: '/random'
      path: '/random'
      fullPath: '/random'
      preLoaderRoute: typeof RandomImport
      parentRoute: typeof rootRoute
    }
    '/random-hero': {
      id: '/random-hero'
      path: '/random-hero'
      fullPath: '/random-hero'
      preLoaderRoute: typeof RandomHeroImport
      parentRoute: typeof rootRoute
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof rootRoute
    }
    '/auth/verify-email': {
      id: '/auth/verify-email'
      path: '/auth/verify-email'
      fullPath: '/auth/verify-email'
      preLoaderRoute: typeof AuthVerifyEmailImport
      parentRoute: typeof rootRoute
    }
    '/cards/$cardId': {
      id: '/cards/$cardId'
      path: '/cards/$cardId'
      fullPath: '/cards/$cardId'
      preLoaderRoute: typeof CardsCardIdImport
      parentRoute: typeof rootRoute
    }
    '/sets/$setId': {
      id: '/sets/$setId'
      path: '/sets/$setId'
      fullPath: '/sets/$setId'
      preLoaderRoute: typeof SetsSetIdImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/reset-password/$code': {
      id: '/auth/reset-password/$code'
      path: '/auth/reset-password/$code'
      fullPath: '/auth/reset-password/$code'
      preLoaderRoute: typeof AuthResetPasswordCodeImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AboutRoute,
  RandomRoute,
  RandomHeroRoute,
  AuthForgotPasswordRoute,
  AuthLoginRoute,
  AuthSignupRoute,
  AuthVerifyEmailRoute,
  CardsCardIdRoute,
  SetsSetIdRoute,
  ProfileIndexRoute,
  AuthResetPasswordCodeRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/about",
        "/random",
        "/random-hero",
        "/auth/forgot-password",
        "/auth/login",
        "/auth/signup",
        "/auth/verify-email",
        "/cards/$cardId",
        "/sets/$setId",
        "/profile/",
        "/auth/reset-password/$code"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/random": {
      "filePath": "random.tsx"
    },
    "/random-hero": {
      "filePath": "random-hero.tsx"
    },
    "/auth/forgot-password": {
      "filePath": "auth/forgot-password.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx"
    },
    "/auth/verify-email": {
      "filePath": "auth/verify-email.tsx"
    },
    "/cards/$cardId": {
      "filePath": "cards/$cardId.tsx"
    },
    "/sets/$setId": {
      "filePath": "sets/$setId.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.tsx"
    },
    "/auth/reset-password/$code": {
      "filePath": "auth/reset-password/$code.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
